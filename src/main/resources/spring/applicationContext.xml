<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">


    <description>Spring公共配置</description>

    <!--<bean class="com.tydic.util.SpringContext"/>-->

    <!-- 打开aop对@Aspectj的注解支持 -->
    <aop:aspectj-autoproxy/>

    <context:annotation-config/>

    <!-- 扫描service、dao -->
    <context:component-scan base-package="com.itzyf">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>


    <!-- 读取配置文件 -->
    <context:property-placeholder ignore-unresolvable="true"
                                  location="classpath*:jdbc.properties,classpath*:global-config.properties"/>


    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->


    <!-- 异常处理记录日志 -->
    <!--<bean id="exceptionThrowsAdvice" class="com.tydic.framework.base.interceptor.ExceptionThrowsAdvice"></bean>-->
    <!-- 配置sqlSessionTemplate -->
    <!--<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">-->
    <!--<constructor-arg index="0" ref="sqlSessionFactory" />-->
    <!--</bean>-->

    <!-- spring整合mybatis （mybatis-spring项目提供整合类） -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <array>
                <value>classpath:mapper/*.xml</value>
            </array>
        </property>
        <property name="typeAliasesPackage" value="com.itzyf.bean"/>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            offsetAsPageNum=true
                            rowBoundsWithCount=true
                            pageSizeZero=true
                            <!--reasonable=true-->
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- MyBatis 动态实现  -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.itzyf.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 对Dao 接口动态实现，需要知道接口在哪  -->
    </bean>

    <!--生产环境用jndi
  <jee:jndi-lookup id="dataSource" jndi-name="jdbc/weixin" />-->

    <!--&lt;!&ndash; 开发环境数据源&ndash;&gt;-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
    </bean>

    <!-- 定义事务 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--<aop:config>-->
        <!--<aop:advisor-->
                <!--pointcut="execution(* com.itzyf.*.*(..))"-->
                <!--advice-ref="txAdvice"/>-->
    <!--</aop:config>-->
    <!--&lt;!&ndash; 事务切面 &ndash;&gt;-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="add*" rollback-for="Exception"/>-->
            <!--<tx:method name="insert*" rollback-for="Exception"/>-->
            <!--<tx:method name="update*" rollback-for="Exception"/>-->
            <!--<tx:method name="del*" rollback-for="Exception"/>-->
            <!--<tx:method name="save*" rollback-for="Exception"/>-->
            <!--<tx:method name="remove*" rollback-for="Exception"/>-->
            <!--<tx:method name="*_Trans" rollback-for="Exception"/>-->
            <!--<tx:method name="*_NotTrans" read-only="true" propagation="SUPPORTS"/>-->
            <!--<tx:method name="*" read-only="true"/>-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="50"/>
        <property name="maxIdle" value="10"/>
        <property name="maxWaitMillis" value="1000"/>
        <property name="testOnBorrow" value="true"/>

    </bean>

    <!--<bean id="jedis.shardInfo" class="redis.clients.jedis.JedisShardInfo">-->
        <!--<constructor-arg index="0" value="${redis.host}"/>-->
        <!--<constructor-arg index="1" type="int" value="${redis.port}"/>-->
    <!--</bean>-->

    <!--<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">-->
        <!--<constructor-arg index="0" ref="jedisPoolConfig"/>-->
        <!--<constructor-arg index="1">-->
            <!--<list>-->
                <!--<ref bean="jedis.shardInfo"/>-->
            <!--</list>-->
        <!--</constructor-arg>-->
    <!--</bean>-->

    <!--<bean id="jedisConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--<property name="maxTotal" value="${redis.maxActive}"></property>-->
        <!--<property name="maxIdle" value="${redis.maxIdle}"></property>-->
        <!--<property name="maxWaitMillis" value="${redis.maxWait}"></property>-->
        <!--<property name="testOnBorrow" value="${redis.testOnBorrow}"></property>-->
    <!--</bean>-->
    <!-- redis连接工厂 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.password}"/>
        <property name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
    <!-- redis操作模板，这里采用尽量面向对象的模板 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--     如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <!--开启事务-->
        <property name="enableTransactionSupport" value="true"/>
    </bean>
</beans>
